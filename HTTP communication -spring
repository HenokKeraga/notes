package com.example.httpinterfacesample;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.boot.web.client.RootUriTemplateHandler;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.support.WebClientAdapter;
import org.springframework.web.service.annotation.GetExchange;
import org.springframework.web.service.invoker.HttpServiceProxyFactory;
import reactor.core.publisher.Mono;

import java.util.List;

@SpringBootApplication
public class HttpinterfaceSampleApplication {

    public static void main(String[] args) {
        SpringApplication.run(HttpinterfaceSampleApplication.class, args);
    }

}

record Post(Integer userId, Integer id, String title, String body) {
}


@RestController
class PostController {
    final PostService postService;

    PostController(PostService postService) {
        this.postService = postService;
    }

    @GetMapping("/posts")
    public List<Post> getPost() {
        return postService.getPostDeclarativeHTTPClient();
    }

    @GetMapping("/postsrt")
    public List<Post> getPost1() {
        return postService.getPostRestTemplate();
    }

    @GetMapping("/postsweb")
    public List<Post> getPost2() {
        return postService.getPostWebClient();
    }
}

@Service
class PostService {

    final JsonPlaceHolderProxy jsonPlaceHolderProxy;
    final RestTemplate restTemplate;
    final WebClient webClient;

    PostService(JsonPlaceHolderProxy jsonPlaceHolderProxy, RestTemplate restTemplate, WebClient webClient) {
        this.jsonPlaceHolderProxy = jsonPlaceHolderProxy;
        this.restTemplate = restTemplate;
        this.webClient = webClient;
    }

    public List<Post> getPostDeclarativeHTTPClient() {
        return jsonPlaceHolderProxy.getPost();
    }

    public List<Post> getPostRestTemplate() {

        var exchange = restTemplate.exchange("/posts", HttpMethod.GET, null, new ParameterizedTypeReference<List<Post>>() {
        });

        return exchange.getBody();
    }

    public List<Post> getPostWebClient() {
        Mono<List<Post>> response = webClient.method(HttpMethod.GET)
                .uri("/posts")
                .retrieve()
                .bodyToMono(new ParameterizedTypeReference<List<Post>>() {
                });

        return response.block();
    }

}

interface JsonPlaceHolderProxy {
    @GetExchange("/posts")
    List<Post> getPost();

}

@Configuration
class WebConfig {

    @Bean
    public WebClient webClient() {
        return WebClient.builder()
                .baseUrl("https://jsonplaceholder.typicode.com")
                .build();
    }

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder restTemplateBuilder) {
        return restTemplateBuilder
                .uriTemplateHandler(new RootUriTemplateHandler("https://jsonplaceholder.typicode.com"))
                .build();
    }

    @Bean
    public JsonPlaceHolderProxy jsonPlaceHolderProxy(WebClient webClient) {
        HttpServiceProxyFactory factory = HttpServiceProxyFactory.builder(WebClientAdapter.forClient(webClient)).build();
        return factory.createClient(JsonPlaceHolderProxy.class);
    }


}
