Answer  
public class Container<T> {
    private T obj;

    public Container(T obj) {
        this.obj = obj;
    }

    public T getObj() {
        return obj;
    }

    public String toString() {
        return String.valueOf(obj);
    }

}

Answer 

 /*
     *  Implement a generic method called findDuplicates that takes an array of elements of any type and returns a new array containing
     *  only the duplicate elements. The returned array should maintain the order of appearance in the original array.
     * Write the method signature and provide an implementation for it.
     * */

    public static <E> E[] findDuplicate(E[] array) {
        Set<E> set = new HashSet<>();
        List<E> list= new ArrayList<>();

        for(E item:array){
            if(!set.contains(item)){
                set.add(item);

            }else {
                list.add(item);
            }

        }

        E[] newArray = Arrays.copyOf(array, 1);

        return list.toArray(newArray);
    }
Answer
  /*
     Implement a generic method called getMax that takes an array of elements and returns the maximum element from the array.
     The method should work with arrays of any type that implements the Comparable interface. Write the method signature
     and provide an implementation for it.
    **/
    public static <E extends Comparable<E>> E getMax(E[] array) {
        if (array == null || array.length == 0) {
            throw new IllegalArgumentException("Array must not be empty or null");
        }

        E max = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i].compareTo(max) > 0) {
                max = array[i];
            }
        }

        return max;
    }
